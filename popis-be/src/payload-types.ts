/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
    admins: AdminAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    admins: Admin;
    media: Media;
    events: Event;
    applications: Application;
    certificates: Certificate;
    schools: School;
    invitations: Invitation;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    admins: AdminsSelect<false> | AdminsSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    events: EventsSelect<false> | EventsSelect<true>;
    applications: ApplicationsSelect<false> | ApplicationsSelect<true>;
    certificates: CertificatesSelect<false> | CertificatesSelect<true>;
    schools: SchoolsSelect<false> | SchoolsSelect<true>;
    invitations: InvitationsSelect<false> | InvitationsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user:
    | (User & {
        collection: 'users';
      })
    | (Admin & {
        collection: 'admins';
      });
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
export interface AdminAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  firstName: string;
  lastName: string;
  phone?: string | null;
  /**
   * Wymagane do określenia czy osoba jest małoletnia
   */
  birthDate: string;
  /**
   * Czy użytkownik jest uczniem szkoły
   */
  isStudent?: boolean | null;
  /**
   * Szkoła ucznia (wymagane jeśli isStudent=true)
   */
  school?: (number | null) | School;
  /**
   * Zatwierdzenie wieku
   */
  isAgeIsVerified?: boolean | null;
  /**
   * Automatycznie wyliczane na podstawie daty urodzenia
   */
  isMinor?: boolean | null;
  /**
   * Automatycznie wyliczane - czy osoba jest pełnoletnia (>= 18 lat)
   */
  isAdult?: boolean | null;
  /**
   * Stream Chat user ID (auto-generated)
   */
  streamUserId?: string | null;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * Cache szkół wybranych przez użytkowników (dane z zewnętrznego API)
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "schools".
 */
export interface School {
  id: number;
  /**
   * Nazwa szkoły
   */
  name: string;
  /**
   * Adres szkoły
   */
  address?: string | null;
  /**
   * Miasto
   */
  city: string;
  /**
   * Kod pocztowy
   */
  postalCode?: string | null;
  /**
   * Typ szkoły
   */
  type?: ('liceum' | 'technikum' | 'branzowa' | 'other') | null;
  /**
   * ID szkoły z zewnętrznego API (np. RSPO)
   */
  externalId: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "admins".
 */
export interface Admin {
  id: number;
  firstName: string;
  lastName: string;
  phone?: string | null;
  organizationName?: string | null;
  organizationDescription?: string | null;
  nip?: string | null;
  address?: {
    street?: string | null;
    city?: string | null;
    postalCode?: string | null;
  };
  schoolName?: string | null;
  schoolAddress?: string | null;
  role: 'organization' | 'coordinator' | 'superadmin';
  /**
   * Konto zatwierdzone przez superadmina
   */
  verified?: boolean | null;
  /**
   * Stream Chat user ID (auto-generated)
   */
  streamUserId?: string | null;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: number;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "events".
 */
export interface Event {
  id: number;
  title: string;
  description: {
    root: {
      type: string;
      children: {
        type: any;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  category: 'education' | 'environment' | 'social' | 'health' | 'animals' | 'culture' | 'sport' | 'other';
  size: 'small' | 'medium' | 'large';
  /**
   * Typ wydarzenia: publiczne (dla wszystkich) lub szkolne (tylko dla uczniów)
   */
  eventType: 'public' | 'school';
  /**
   * Szkoła docelowa (opcjonalne, dla wydarzeń szkolnych)
   */
  targetSchool?: (number | null) | School;
  /**
   * Główne zdjęcie wydarzenia
   */
  image?: (number | null) | Media;
  location: {
    address: string;
    city: string;
    /**
     * Szerokość geograficzna (dla mapy)
     */
    lat?: number | null;
    /**
     * Długość geograficzna (dla mapy)
     */
    lng?: number | null;
  };
  startDate: string;
  endDate?: string | null;
  /**
   * Przewidywana liczba godzin wolontariatu
   */
  duration: number;
  /**
   * Minimalny wiek uczestnika
   */
  minAge: number;
  /**
   * Maksymalna liczba wolontariuszy (opcjonalne)
   */
  maxVolunteers?: number | null;
  /**
   * Wymagania dla wolontariuszy
   */
  requirements?: string | null;
  /**
   * Dodatkowe informacje o wydarzeniu (opcjonalne)
   */
  additionalInfo?: string | null;
  status: 'draft' | 'published' | 'completed' | 'cancelled';
  /**
   * Organizacja odpowiedzialna za wydarzenie
   */
  organization: number | Admin;
  /**
   * Użytkownik który stworzył wydarzenie
   */
  createdBy?: (number | null) | Admin;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "applications".
 */
export interface Application {
  id: number;
  event: number | Event;
  volunteer: number | User;
  /**
   * Wiadomość od wolontariusza
   */
  message?: string | null;
  /**
   * Liczba przepracowanych godzin (wypełnia organizacja)
   */
  hoursWorked?: number | null;
  /**
   * Notatki organizacji (widoczne tylko dla organizacji i superadmina)
   */
  organizationNotes?: string | null;
  status: 'pending' | 'accepted' | 'rejected' | 'completed';
  appliedAt?: string | null;
  /**
   * Data ukończenia wolontariatu
   */
  completedAt?: string | null;
  /**
   * Stream Chat channel ID (auto-generated po akceptacji)
   */
  chatChannelId?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "certificates".
 */
export interface Certificate {
  id: number;
  /**
   * Powiązane zgłoszenie
   */
  application: number | Application;
  volunteer: number | User;
  event: number | Event;
  /**
   * Wypełniane automatycznie z wydarzenia
   */
  organization?: (number | null) | Admin;
  /**
   * Liczba przepracowanych godzin
   */
  hoursWorked: number;
  /**
   * Kto wystawił zaświadczenie (organizacja lub koordynator)
   */
  issuedBy?: (number | null) | Admin;
  /**
   * Koordynator który zatwierdził (opcjonalne)
   */
  approvedBy?: (number | null) | Admin;
  /**
   * Dodatkowe uwagi
   */
  notes?: string | null;
  status: 'pending' | 'issued';
  /**
   * Unikalny numer zaświadczenia
   */
  certificateNumber: string;
  /**
   * Data wystawienia
   */
  issueDate: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "invitations".
 */
export interface Invitation {
  id: number;
  /**
   * Wydarzenie do którego zapraszamy
   */
  event: number | Event;
  /**
   * Zaproszony wolontariusz
   */
  volunteer: number | User;
  /**
   * Wiadomość dla wolontariusza (opcjonalne)
   */
  message?: string | null;
  status: 'pending' | 'accepted' | 'declined';
  /**
   * Kto wysłał zaproszenie (organizacja lub koordynator)
   */
  invitedBy: number | Admin;
  /**
   * Data wysłania zaproszenia
   */
  invitedAt: string;
  /**
   * Data odpowiedzi na zaproszenie
   */
  respondedAt?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'users';
        value: number | User;
      } | null)
    | ({
        relationTo: 'admins';
        value: number | Admin;
      } | null)
    | ({
        relationTo: 'media';
        value: number | Media;
      } | null)
    | ({
        relationTo: 'events';
        value: number | Event;
      } | null)
    | ({
        relationTo: 'applications';
        value: number | Application;
      } | null)
    | ({
        relationTo: 'certificates';
        value: number | Certificate;
      } | null)
    | ({
        relationTo: 'schools';
        value: number | School;
      } | null)
    | ({
        relationTo: 'invitations';
        value: number | Invitation;
      } | null);
  globalSlug?: string | null;
  user:
    | {
        relationTo: 'users';
        value: number | User;
      }
    | {
        relationTo: 'admins';
        value: number | Admin;
      };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user:
    | {
        relationTo: 'users';
        value: number | User;
      }
    | {
        relationTo: 'admins';
        value: number | Admin;
      };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  firstName?: T;
  lastName?: T;
  phone?: T;
  birthDate?: T;
  isStudent?: T;
  school?: T;
  isAgeIsVerified?: T;
  isMinor?: T;
  isAdult?: T;
  streamUserId?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "admins_select".
 */
export interface AdminsSelect<T extends boolean = true> {
  firstName?: T;
  lastName?: T;
  phone?: T;
  organizationName?: T;
  organizationDescription?: T;
  nip?: T;
  address?:
    | T
    | {
        street?: T;
        city?: T;
        postalCode?: T;
      };
  schoolName?: T;
  schoolAddress?: T;
  role?: T;
  verified?: T;
  streamUserId?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "events_select".
 */
export interface EventsSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  category?: T;
  size?: T;
  eventType?: T;
  targetSchool?: T;
  image?: T;
  location?:
    | T
    | {
        address?: T;
        city?: T;
        lat?: T;
        lng?: T;
      };
  startDate?: T;
  endDate?: T;
  duration?: T;
  minAge?: T;
  maxVolunteers?: T;
  requirements?: T;
  additionalInfo?: T;
  status?: T;
  organization?: T;
  createdBy?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "applications_select".
 */
export interface ApplicationsSelect<T extends boolean = true> {
  event?: T;
  volunteer?: T;
  message?: T;
  hoursWorked?: T;
  organizationNotes?: T;
  status?: T;
  appliedAt?: T;
  completedAt?: T;
  chatChannelId?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "certificates_select".
 */
export interface CertificatesSelect<T extends boolean = true> {
  application?: T;
  volunteer?: T;
  event?: T;
  organization?: T;
  hoursWorked?: T;
  issuedBy?: T;
  approvedBy?: T;
  notes?: T;
  status?: T;
  certificateNumber?: T;
  issueDate?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "schools_select".
 */
export interface SchoolsSelect<T extends boolean = true> {
  name?: T;
  address?: T;
  city?: T;
  postalCode?: T;
  type?: T;
  externalId?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "invitations_select".
 */
export interface InvitationsSelect<T extends boolean = true> {
  event?: T;
  volunteer?: T;
  message?: T;
  status?: T;
  invitedBy?: T;
  invitedAt?: T;
  respondedAt?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}